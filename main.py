import logging, os, re
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils import executor

from dotenv import load_dotenv


load_dotenv()

#Fucntion
def get_random_string(length):
    import random, string
    characters = string.ascii_letters + string.digits
    return ''.join(random.choice(characters) for i in range(length))

def convert_round(file):
    import subprocess
    try:
        subprocess.run([
            'ffmpeg','-hide_banner', '-loglevel', 'error', '-i', file, '-r', '30', '-t', '2.99', 
            '-filter_complex', "[0:v]scale=512:512:force_original_aspect_ratio=decrease,crop=ih:ih[video square];[video square]split=3[black canvas][white canvas][video square];[black canvas]setsar=1:1,drawbox=color=black@1:t=fill[black background];[white canvas]scale=w=iw:h=iw,format=yuva444p,geq=lum='p(X,Y)':a='st(1,pow((W-10),2)/4)+st(3,pow(X-(W/2),2)+pow(Y-(H/2),2));if(lte(ld(3),ld(1)),255,0)',drawbox=color=white@1:t=fill[scaled up white circle];[scaled up white circle]scale=w=iw:h=iw[white circle];[black background][white circle]overlay[alpha mask];[video square][alpha mask]alphamerge,format=yuva420p",
            '-filter_complex_threads', '1', '-c:v', 'libvpx-vp9', '-auto-alt-ref', '0', '-preset', 'ultrafast', '-an', '-b:v', '400K', file.replace(".mp4", ".webm")])
        os.remove(file)
        return True
    except Exception as e:
        os.remove(file)
        logging.warning('Error at %s', 'division', exc_info=e)
        return False

def convert_video(file):
    import subprocess
    try:
        subprocess.run([
            'ffmpeg','-hide_banner', '-loglevel', 'error', '-y', '-i', file, '-r', '30', '-t', '2.99',           
             '-an', '-c:v', 'libvpx-vp9','-pix_fmt', 'yuva420p' , '-vf', 'scale=512:512:force_original_aspect_ratio=decrease', '-b:v', '400K', file.replace(".mp4", ".webm")])
        os.remove(file)
        return True
    except Exception as e:
        os.remove(file)
        logging.warning('Error at %s', 'division', exc_info=e)
        return False

def resize_image(file, size=(512, 512)):
    from PIL import Image 
    try:
        original_image = Image.open(file)
        width, height = original_image.size
        rel = max(width, height) / 512
        width = int(width / rel) 
        height = int(height / rel)
        size = (width, height)
        resized_image = original_image.resize(size)
        resized_image.save(file)
    except Exception as e:
        os.remove(file)
        logging.warning('Error at %s', 'division', exc_info=e)

#Startup
logging.basicConfig(level=logging.INFO)
bot = Bot(token=os.getenv("TOKEN"))
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)
# States
class Form(StatesGroup):
    name = State()
    media_add = State()
    title_pack = State()
    name_pack = State()
    photo = State()
    convert_round = State()
    convert_vid = State()
    #title_videopack = State()
    #name_videopack = State()
    #video = State()

#Cancel
@dp.message_handler(state='*', commands='cancel')
async def cancel(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        return
    await state.finish()
    await message.reply('–°–∫–∞—Å–æ–≤–∞–Ω–æ(', reply_markup=types.ReplyKeyboardRemove())

#Complete
@dp.message_handler(state='*', commands='complete')
async def start(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        if(data['name'] is None):
            return
        try:
            StickerSet = await bot.get_sticker_set(data['name'])
        except:
            return
        await message.answer(f"<a href = \"https://t.me/addstickers/{StickerSet.name}\">{StickerSet.title}</a> –¥–æ–¥–∞–Ω–æ –Ω–æ–≤—ñ –Ω–∞–ª—ñ–ø–∫–∏ü•∞", parse_mode='HTML')
        await state.finish()


# Start
@dp.message_handler(commands='start')
async def start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤—ñ—Ç! \n–Ø –º–∞–ª–µ–Ω—å–∫–∏–π —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏–π –±–æ—Ç, —â–æ –¥–æ–ø–æ–º–æ–≥–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ —Å–≤–æ—ó –Ω–∞–ª—ñ–ø–∫–∏) \n–°–ø–æ–¥—ñ–≤–∞—é—Å—å, –í–∞–º —Å–ø–æ–¥–æ–±–∞—î—Ç—å—Å—è!)\n/newpack ‚Äì –°—Ç–≤–æ—Ä—é—é –Ω–æ–≤–∏–π –ø–∞–∫ –Ω–∞–ª—ñ–ø–æ–∫\n/addsticker - –î–æ–¥–∞—é –Ω–∞–ª—ñ–ø–∫—É –¥–æ —ñ—Å–Ω—É—é—á–æ–≥–æ –ø–∞–∫—É\n/convertround - –∫–æ–Ω–≤–µ—Ä—Ç—É–≤–∞–Ω–Ω—è \"–∫—Ä—É–∂–µ—á–∫—ñ–≤\"\n/convertvideo - –ö–æ–Ω–≤–µ—Ä—Ç—É–≤–∞–Ω–Ω—è –≤—ñ–¥–µ–æ\n/cancel - –°–∫–∞—Å—É–≤–∞—Ç–∏ –¥—ñ—é")

#addSticker
@dp.message_handler(commands='addsticker')
async def addSticker(message: types.Message):
    await Form.name.set()
    me = await bot.get_me()
    await message.reply(f"–°–ø–æ—á–∞—Ç–∫—É, –±—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥–∏ –Ω–∞–∑–≤—É —ñ—Å–Ω—É—é—á–æ–≥–æ –ø–∞–∫—É –Ω–∞–ª—ñ–ø–æ–∫(–Ω–µ–æ–±—Ö—ñ–¥–Ω–æ, —â–æ–± –≤—ñ–Ω –∑–∞–∫—ñ–Ω—á—É–≤–∞–≤—Å—è –Ω–∞ \"_by_{me.username}\"))")

#inputStickerPack
@dp.message_handler(state=Form.name)
async def inputStickerPack(message: types.Message, state: FSMContext):
    myinfo = await bot.get_me()
    txtmsg = message.text
    if(not f"_by_{myinfo.username}" in txtmsg):
        txtmsg += f"_by_{myinfo.username}"
    try:
        StickerSet = await bot.get_sticker_set(txtmsg)
        if(len(StickerSet.stickers) >= 120):
            return await message.reply("–ù–∞–∂–∞–ª—å, –∫—ñ–ª—å–∫—ñ—Å—Ç—å –Ω–∞–ª—ñ–ø–æ–∫ –¥–æ—Å—è–≥–ª–∞ –º–∞–∫—Å–∏–º—É–º—É((\n\n–£ –æ–¥–Ω–æ–º—É –ø–∞–∫—É –º–æ–∂–µ –±—É—Ç–∏ –º–∞–∫—Å–∏–º—É–º –ª–∏—à–µ 120 –Ω–∞–ª—ñ–ø–æ–∫, —Ç–æ–º—É –ø—Ä–æ–ø–æ–Ω—É—é —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–∏–π –ø–∞–∫ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –∫–æ–º–∞–Ω–¥–∏ /newpack")
    except:
        return await message.reply("–£–ø—Å... –ù–µ –∑–Ω–∞–π—à–æ–≤ —Ü—å–æ–≥–æ –ø–∞–∫—É –Ω–∞–ª—ñ–ø–æ–∫:(\n–ú–æ–∂–ª–∏–≤–æ –í–∏ –¥–æ–ø—É—Å—Ç–∏–ª–∏ –ø–æ–º–∏–ª–∫—É, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ!")

    async with state.proxy() as data:
        data['name'] = txtmsg
    
    await Form.media_add.set()
    await message.reply(f"–í–∏–±—Ä–∞–Ω –ø–∞–∫ <a href = \"https://t.me/addstickers/{StickerSet.name}\">{StickerSet.title}</a>\n–í—ñ–¥–ø—Ä–∞–≤—Ç–µ —Ñ–æ—Ç–æ —â–æ–± –¥–æ–¥–∞—Ç–∏(–ø–æ –æ–¥–Ω–æ–º—É)", parse_mode='HTML')

#incorrectPhoto
@dp.message_handler(lambda message: message.content_type!='photo' , state=Form.media_add)
async def incorrectPhoto(message: types.Message):
    return await message.reply("–¶–µ, –∑–≤—ñ—Å–Ω–æ, –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ, –∞–ª–µ –±—É–¥—å –ª–∞—Å–∫–∞, –≤—ñ–¥–ø—Ä–∞–≤ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—é(")

#addStickerToPack
@dp.message_handler(content_types=['photo'], state=Form.media_add)
async def addStickerToPack(message: types.Message, state: FSMContext):
    #photoID
    if(message['media_group_id'] == None):
        photo_id = message['photo'][0]['file_unique_id']
    else:
        photo_id = message['media_group_id']
    #checkGroupPhoto
    async with state.proxy() as data:
        try:
            if(data['media_add'] == photo_id):
                return
        except:
            pass

        data['media_add'] = photo_id
    #downloadPhoto
    await message.photo[-1].download(destination_file="file/"+photo_id +".png")
    #changeResolution
    resize_image("file/"+photo_id +".png")
    #formWorker
    async with state.proxy() as data:
        #checkError
        try:
            #tryToAddSticker
            if( await bot.add_sticker_to_set(
                    user_id = message.from_id, 
                    name = data['name'], 
                    emojis= '‚ù§Ô∏è',
                    png_sticker= open("file/"+data['media_add']+'.png', 'rb')
                    )):
                await message.reply(f"–î–æ–¥–∞–Ω–æ –¥–æ –ø–∞–∫—É, –≤–∏ –º–æ–∂–µ—Ç–µ –¥–æ–¥–∞–≤–∞—Ç–∏ —â–µ... \n–©–æ–± –∑—É–ø–∏–Ω–∏—Ç–∏—Å—å, –Ω–∞–ø–∏—à—ñ—Ç—å /complete")
                #deletePhoto
                os.remove("file/"+data['media_add']+'.png')
            else:
                await message.reply(f"–Ø–∫—ñ—Å—å –ø–æ–º–∏–ª–∫–∏, —Å–ø—Ä–æ–±—É–π—Ç–µ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ —â–µ —Ä–∞–∑(")
                os.remove("file/"+data['media_add']+'.png')
        except:
            await message.reply(f"–Ø–∫—ñ—Å—å –ø–æ–º–∏–ª–∫–∏, —Å–ø—Ä–æ–±—É–π—Ç–µ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ —â–µ —Ä–∞–∑(")
            #deletePhoto
            os.remove("file/"+data['media_add']+'.png')
        
#startNewStickerpack
@dp.message_handler(commands='newpack')
async def startNewStickerpack(message: types.Message):
    await Form.title_pack.set()
    await message.reply("–°–ø–æ—á–∞—Ç–∫—É, –±—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥–∏ –Ω–∞–∑–≤—É –º–∞–π–±—É—Ç–Ω—å–æ–≥–æ –ø–∞–∫—É –Ω–∞–ª—ñ–ø–æ–∫)")

#incorrecttitle
@dp.message_handler(lambda message: len(message.text)>30, state=Form.title_pack)
async def incorrecttitle(message: types.Message):
    return await message.reply("–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–µ –±—ñ–ª—å—à–µ 30 —Å–∏–º–≤–æ–ª—ñ–≤ —É –Ω–∞–∑–≤—ñ, –Ω—ñ—Ö—Ç–æ –∂ –Ω–µ –∑—Ä–æ–∑—É–º—ñ—î —Ç–æ–¥—ñ((\n–ú–æ—è –ø–æ—Ä–∞–¥–∞, –æ–±–º–µ–∂—Ç–µ—Å—å 10-15 —Å–∏–º–≤–æ–ª–∞–º–∏")

#addTitle
@dp.message_handler(lambda message: len(message.text)<=30, state=Form.title_pack)
async def addTitle(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['title_pack'] = message.text
    await Form.next()
    await message.reply("–î—è–∫—É—éü•∞ \n–¢–µ–ª–µ–≥—Ä–∞–º—É –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ —â–æ–± —Ç–∏ –≤–≤—ñ–≤ –∫–æ—Ä–æ—Ç–∫—É –Ω–∞–∑–≤—É.\n\n–ó –æ—Ñ—Ñ—ñ—Ü—ñ–π–Ω–æ—ó –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—ó: \n\"–ö–æ—Ä–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞ –Ω–∞–±–æ—Ä—É –Ω–∞–∫–ª–µ–π–æ–∫ –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –≤ URL-–∞–¥—Ä–µ—Å–∞—Ö t.me/addstickers/ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, animals). –ú–æ–∂–µ –º—ñ—Å—Ç–∏—Ç–∏ –ª–∏—à–µ –∞–Ω–≥–ª—ñ–π—Å—å–∫—ñ –ª—ñ—Ç–µ—Ä–∏, —Ü–∏—Ñ—Ä–∏ —Ç–∞ –ø—ñ–¥–∫—Ä–µ—Å–ª–µ–Ω–Ω—è.\"")

#incorrectName1
@dp.message_handler(lambda message: len(re.sub(r'[^a-zA-Z]', '', message.text[0])) == 0, state=Form.name_pack)
async def incorrectName(message: types.Message):
    return await message.reply("–ö–æ—Ä–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞ –ø–æ–≤–∏–Ω–Ω–∞ –ø–æ—á–∏–Ω–∞—Ç–∏—Å—è –∑ –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—ó –ª—ñ—Ç–µ—Ä–∏")

#incorrectName
@dp.message_handler(lambda message: len(message.text)>15 or len(re.sub(r'[^a-zA-Z]', '', message.text)) == 0, state=Form.name_pack)
async def incorrectName(message: types.Message):
    return await message.reply("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–æ–¥—å—Ç–µ –Ω–µ –±—ñ–ª—å—à–µ 15 —Å–∏–º–≤–æ–ª—ñ–≤ —É –∫–æ—Ä–æ—Ç–∫—ñ–π –Ω–∞–∑–≤—ñ —Ç–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –ª–∏—à–µ –ª–∞—Ç–∏–Ω—Å—å–∫—ñ –ª—ñ—Ç–µ—Ä–∏, —Ü–∏—Ñ—Ä–∏ —Ç–∞ –ø—ñ–¥–∫—Ä–µ—Å–ª–µ–Ω–Ω—è")

#addName
@dp.message_handler(lambda message: len(message.text)<=15 and len(re.sub(r'[^a-zA-Z]', '', message.text[0])) == 1, state=Form.name_pack)
async def addName(message: types.Message, state: FSMContext):
    #formatNameToCorrect
    result = str(message.text)
    #result = re.sub(r'[^a-zA-Z0-9_]', '', result)
    #checkUniqueName
    myinfo = await bot.get_me()
    try:
        StickerSet = await bot.get_sticker_set(result+"_by_"+myinfo.username)
    except:
        StickerSet = None
    if(StickerSet != None):
        return await message.reply("–ù–∞–∂–∞–ª—å –∑ —Ç–∞–∫–æ—é –Ω–∞–∑–≤–æ—é –≤–∂–µ —ñ—Å–Ω—É—î —ñ–Ω—à–∏–π –ø–∞–∫ –Ω–∞–ª—ñ–ø–æ–∫(\n–°–ø—Ä–æ–±—É–π—Ç–µ —ñ–Ω—à—É –Ω–∞–∑–≤—É!")
    #addName
    async with state.proxy() as data:
        data['name_pack'] = result
    await Form.next()
    await message.reply("–î—è–∫—É—é‚ù§Ô∏è\n–í—ñ–¥–ø—Ä–∞–≤—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—é –Ω–∞ –ø–µ—Ä—à—É –Ω–∞–ª—ñ–ø–∫—É)")

#incorrectPhoto
@dp.message_handler(lambda message: message.content_type!='photo' , state=Form.photo)
async def incorrectPhoto(message: types.Message):
    return await message.reply("–¶–µ, –∑–≤—ñ—Å–Ω–æ, –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ, –∞–ª–µ –±—É–¥—å –ª–∞—Å–∫–∞, –≤—ñ–¥–ø—Ä–∞–≤ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—é(")

#addPhotoandSend
@dp.message_handler(content_types=['photo'], state=Form.photo)
async def photo_correct(message: types.Message, state: FSMContext):
    #checkGroupPhoto
    if(message['media_group_id'] == None):
        photo_id = message['photo'][0]['file_unique_id']
    else:
        photo_id = message['media_group_id']

    async with state.proxy() as data:
        try:
            if(data['photo'] == photo_id):
                return
        except:
            pass
        data['photo'] = photo_id
    
    #checkUniqueName
    result = str(message.text)
    #result = re.sub(r'[^a-zA-Z0-9_]', '', message.text)
    myinfo = await bot.get_me()
    try:
        StickerSet = await bot.get_sticker_set(result+"_by_"+myinfo.username)
    except:
        StickerSet = None
    if(StickerSet !=None):
        Form.name.set()
        return await message.reply("–ù–∞–∂–∞–ª—å –∑ —Ç–∞–∫–æ—é –Ω–∞–∑–≤–æ—é –≤–∂–µ —ñ—Å–Ω—É—î —ñ–Ω—à–∏–π –ø–∞–∫ –Ω–∞–ª—ñ–ø–æ–∫(\n–°–ø—Ä–æ–±—É–π—Ç–µ —ñ–Ω—à—É –Ω–∞–∑–≤—É!")

    #downloadPhoto
    await message.photo[-1].download(destination_file="file/"+photo_id +".png")
    #changeResolution
    resize_image("file/"+photo_id +".png")
    myinfo = await bot.get_me()
    #formWorker
    async with state.proxy() as data:
        #tryToCreateStickerPack
        if( await bot.create_new_sticker_set(
                user_id = message.from_id, 
                name = data['name_pack'] + "_by_" + myinfo.username, 
                title = data['title_pack'] + " | by @"+myinfo.username,
                emojis= '‚ù§Ô∏è',
                png_sticker= open("file/"+data['photo']+'.png', 'rb')
                )):
            await message.reply(f"–°—Ç–≤–æ—Ä–µ–Ω–æ –Ω–æ–≤–∏–π –ø–∞–∫ –Ω–∞–ª—ñ–ø–æ–∫ t.me/addstickers/{data['name_pack']}_by_{myinfo.username}")
            await state.finish()
            #deletePhoto
            os.remove("file/"+data['photo']+'.png')



#startNewStickerpack
@dp.message_handler(commands='convertround')
async def convertRound(message: types.Message):
    await Form.convert_round.set()
    await message.reply("–í—ñ–¥–ø—Ä–∞–≤—Ç–µ –≤—ñ–¥–µ–æ/gif –≤—ñ–¥–µ–æ–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —á–∏ –ø—Ä–µ—à–ª—ñ—Ç—å –≤—ñ–¥–µ–æ–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É —Ü–µ–π —á–∞—Ç\n–©–æ–± –∑–∞–≤–µ—Ä—à–∏—Ç–∏ –∫–æ–Ω–≤–µ—Ä—Ç—É–≤–∞–Ω–Ω—è –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å /cancel")

@dp.message_handler(commands='convertvideo')
async def convertVideo(message: types.Message):
    await Form.convert_vid.set()
    await message.reply("–í—ñ–¥–ø—Ä–∞–≤—Ç–µ –≤—ñ–¥–µ–æ —É —Ü–µ–π —á–∞—Ç\n–©–æ–± –∑–∞–≤–µ—Ä—à–∏—Ç–∏ –∫–æ–Ω–≤–µ—Ä—Ç—É–≤–∞–Ω–Ω—è –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å /cancel")


@dp.message_handler(content_types=[types.ContentType.VIDEO, types.ContentType.VIDEO_NOTE, types.ContentType.ANIMATION], state=Form.convert_round)
async def videocorrect(message: types.Message, state: FSMContext):
    await bot.send_chat_action(message.from_id, 'upload_document')
    if(message.content_type in [types.ContentType.VIDEO_NOTE]):
        idfile = message.video_note.file_id
    elif(message.content_type in [types.ContentType.VIDEO]):
        idfile = message.video.file_id
    elif(message.content_type in [types.ContentType.ANIMATION]):
        idfile = message.animation.file_id
    file_info = await bot.get_file(idfile)
    try:
            await bot.download_file(file_info.file_path, "file/"+idfile +".mp4")
            if convert_round("file/"+str(idfile) +".mp4"):
                await message.reply_document(open("file/"+str(idfile) +".webm", 'rb'), caption="–©–æ–± –∑–∞–∫—ñ–Ω—á–∏—Ç–∏ –ø–æ—Ç—ñ–∫ –∫–æ–Ω–≤–µ—Ä—Ç—É–≤–∞–Ω–Ω—è –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å /cancel")
            else:
                await message.reply("–°–∫–æ—Ä—ñ—à –∑–∞ –≤—Å–µ –≤–∏ –≤—ñ–¥–ø—Ä–∞–≤–∏–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–µ –≤—ñ–¥–µ–æ(–≤–æ–Ω–æ –Ω–µ –∫–≤–∞–¥—Ä–∞—Ç–Ω–µ), —á–∏ –ø—Ä–æ–±–ª–µ–º–∞ –∑ –∫–æ–Ω–≤–µ—Ä—Ç—É–≤–∞–Ω–Ω—è–º\n–°–ø—Ä–æ–±—É–π—Ç–µ /convertvideo –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç—É–≤–∞–Ω–Ω—è)")
    except Exception as e:
        logging.warning('Error at %s', 'division', exc_info=e)
    os.remove("file/"+str(idfile) +".webm")

@dp.message_handler(content_types=[types.ContentType.VIDEO, types.ContentType.ANIMATION], state=Form.convert_vid)
async def videocorrect(message: types.Message, state: FSMContext):
    await bot.send_chat_action(message.from_id, 'upload_document')
    if(message.content_type in [types.ContentType.VIDEO]):
        idfile = message.video.file_id
    elif(message.content_type in [types.ContentType.ANIMATION]):
        idfile = message.animation.file_id
    file_info = await bot.get_file(idfile)
    try:
            await bot.download_file(file_info.file_path, "file/"+idfile +".mp4")
            if convert_video("file/"+str(idfile) +".mp4"):
                await message.reply_document(open("file/"+str(idfile) +".webm", 'rb'), caption="–©–æ–± –∑–∞–∫—ñ–Ω—á–∏—Ç–∏ –ø–æ—Ç—ñ–∫ –∫–æ–Ω–≤–µ—Ä—Ç—É–≤–∞–Ω–Ω—è –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å /cancel")
            else:
                await message.reply("–ü—Ä–æ–±–ª–µ–º–∞ –∑ –∫–æ–Ω–≤–µ—Ä—Ç—É–≤–∞–Ω–Ω—è–º")
    except Exception as e:
        logging.warning('Error at %s', 'division', exc_info=e)
    os.remove("file/"+str(idfile) +".webm")

'''
@dp.message_handler(content_types=types.ContentType.ANY)
async def mdc_all(message: types.Message):
    if(message.content_type in [types.ContentType.VIDEO_NOTE]):
        await bot.send_chat_action(message.from_id, 'upload_document')
        file_info = await bot.get_file(message.video_note.file_id)
        try:
            await bot.download_file(file_info.file_path, "file/"+message.video_note.file_id +".mp4")
            convert_video("file/"+str(message.video_note.file_id) +".mp4")
            await message.reply_document(open("file/"+str(message.video_note.file_id) +".webm", 'rb'))
            os.remove("file/"+str(message.video_note.file_id) +".webm")
        except Exception as e:
            os.remove("file/"+str(message.video_note.file_id) +".webm")
            logging.warning('Error at %s', 'division', exc_info=e)'''


#does not work on Aiogram 2.x, works on 3.x, but needs an upgrade code and it takes a long time
'''
#startNewRoundStickerpack
@dp.message_handler(commands='newvideopack')
async def startNewStickerpackV(message: types.Message):
    await Form.title_videopack.set()
    await message.reply("–°–ø–æ—á–∞—Ç–∫—É, –±—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥–∏ –Ω–∞–∑–≤—É –º–∞–π–±—É—Ç–Ω—å–æ–≥–æ –ø–∞–∫—É –≤—ñ–¥–µ–æ-–Ω–∞–ª—ñ–ø–æ–∫)")

#incorrecttitle
@dp.message_handler(lambda message: len(message.text)>30, state=Form.title_videopack)
async def incorrecttitle(message: types.Message):
    return await message.reply("–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–µ –±—ñ–ª—å—à–µ 30 —Å–∏–º–≤–æ–ª—ñ–≤ —É –Ω–∞–∑–≤—ñ, –Ω—ñ—Ö—Ç–æ –∂ –Ω–µ –∑—Ä–æ–∑—É–º—ñ—î —Ç–æ–¥—ñ((\n–ú–æ—è –ø–æ—Ä–∞–¥–∞, –æ–±–º–µ–∂—Ç–µ—Å—å 10-15 —Å–∏–º–≤–æ–ª–∞–º–∏")

#addTitle
@dp.message_handler(lambda message: len(message.text)<=30, state=Form.title_videopack)
async def addTitleV(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['title_videopack'] = message.text
    await Form.name_videopack.set()
    await message.reply("–î—è–∫—É—éü•∞ \n–¢–µ–ª–µ–≥—Ä–∞–º—É –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ —â–æ–± —Ç–∏ –≤–≤—ñ–≤ –∫–æ—Ä–æ—Ç–∫—É –Ω–∞–∑–≤—É.\n\n–ó –æ—Ñ—Ñ—ñ—Ü—ñ–π–Ω–æ—ó –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—ó: \n\"–ö–æ—Ä–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞ –Ω–∞–±–æ—Ä—É –Ω–∞–∫–ª–µ–π–æ–∫ –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –≤ URL-–∞–¥—Ä–µ—Å–∞—Ö t.me/addstickers/ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, animals). –ú–æ–∂–µ –º—ñ—Å—Ç–∏—Ç–∏ –ª–∏—à–µ –∞–Ω–≥–ª—ñ–π—Å—å–∫—ñ –ª—ñ—Ç–µ—Ä–∏, —Ü–∏—Ñ—Ä–∏ —Ç–∞ –ø—ñ–¥–∫—Ä–µ—Å–ª–µ–Ω–Ω—è.")

#incorrectName1
@dp.message_handler(lambda message: len(re.sub(r'[^a-zA-Z]', '', message.text[0])) == 0, state=Form.name_videopack)
async def incorrectNameV1(message: types.Message):
    return await message.reply("–ö–æ—Ä–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞ –ø–æ–≤–∏–Ω–Ω–∞ –ø–æ—á–∏–Ω–∞—Ç–∏—Å—è –∑ –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—ó –ª—ñ—Ç–µ—Ä–∏")

#incorrectName
@dp.message_handler(lambda message: len(message.text)>15 or len(re.sub(r'[^a-zA-Z]', '', message.text)) == 0, state=Form.name_videopack)
async def incorrectNameV(message: types.Message):
    return await message.reply("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–æ–¥—å—Ç–µ –Ω–µ –±—ñ–ª—å—à–µ 15 —Å–∏–º–≤–æ–ª—ñ–≤ —É –∫–æ—Ä–æ—Ç–∫—ñ–π –Ω–∞–∑–≤—ñ —Ç–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –ª–∏—à–µ –ª–∞—Ç–∏–Ω—Å—å–∫—ñ –ª—ñ—Ç–µ—Ä–∏, —Ü–∏—Ñ—Ä–∏ —Ç–∞ –ø—ñ–¥–∫—Ä–µ—Å–ª–µ–Ω–Ω—è")

#addName
@dp.message_handler(lambda message: len(message.text)<=15 and len(re.sub(r'[^a-zA-Z]', '', message.text)) >= 1 and len(re.sub(r'[^a-zA-Z]', '', message.text[0])) > 0, state=Form.name_videopack)
async def addNameV(message: types.Message, state: FSMContext):
    #formatNameToCorrect
    result = str(message.text)
    #result = re.sub(r'[^a-zA-Z0-9_]', '', result)
    #checkUniqueName
    myinfo = await bot.get_me()
    try:
        StickerSet = await bot.get_sticker_set(result+"_by_"+myinfo.username)
    except:
        StickerSet = None
    if(StickerSet != None):
        return await message.reply("–ù–∞–∂–∞–ª—å –∑ —Ç–∞–∫–æ—é –Ω–∞–∑–≤–æ—é –≤–∂–µ —ñ—Å–Ω—É—î —ñ–Ω—à–∏–π –ø–∞–∫ –Ω–∞–ª—ñ–ø–æ–∫(\n–°–ø—Ä–æ–±—É–π—Ç–µ —ñ–Ω—à—É –Ω–∞–∑–≤—É!")
    #addName
    async with state.proxy() as data:
        data['name_videopack'] = result
    await Form.video.set()
    await message.reply("–î—è–∫—É—é‚ù§Ô∏è\n–ü–µ—Ä–µ—à–ª—ñ—Ç—å —É —Ü–µ–π —á–∞—Ç –≤—ñ–¥–µ–æ—Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –Ω–∞ –ø–µ—Ä—à—É –Ω–∞–ª—ñ–ø–∫—É)")

#incorrectPhoto
@dp.message_handler(lambda message: message.content_type!='video_note' , state=Form.video)
async def incorrectPhotoV(message: types.Message):
    return await message.reply("–¶–µ, –∑–≤—ñ—Å–Ω–æ, –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ, –∞–ª–µ –±—É–¥—å –ª–∞—Å–∫–∞, –≤—ñ–¥–ø—Ä–∞–≤—Ç–µ –≤—ñ–¥–µ–æ—Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è(")

#addPhotoandSend
@dp.message_handler(content_types=['video_note'], state=Form.video)
async def photo_correctV(message: types.Message, state: FSMContext):
    #checkGroupPhoto]
    async with state.proxy() as data:
        data['video'] = message.video_note.file_id
    
    #checkUniqueName
    async with state.proxy() as data:
        result = str(data['name_videopack'])
        #result = re.sub(r'[^a-zA-Z0-9_]', '', message.text)
        myinfo = await bot.get_me()
        try:
            StickerSet = await bot.get_sticker_set(result+"_by_"+myinfo.username)
        except:
            StickerSet = None
        if(StickerSet !=None):
            Form.name_videopack.set()
            return await message.reply("–ù–∞–∂–∞–ª—å –∑ —Ç–∞–∫–æ—é –Ω–∞–∑–≤–æ—é –≤–∂–µ —ñ—Å–Ω—É—î —ñ–Ω—à–∏–π –ø–∞–∫ –Ω–∞–ª—ñ–ø–æ–∫(\n–°–ø—Ä–æ–±—É–π—Ç–µ —ñ–Ω—à—É –Ω–∞–∑–≤—É!")
        #downloadPhoto
        file_info = await bot.get_file(data['video'])
        await bot.download_file(file_info.file_path, "file/"+data['video'] +".mp4")

        #changeResolution
        convert_video("file/"+str(data['video']) +".mp4")
        myinfo = await bot.get_me()
        #formWorker
        #tryToCreateStickerPack
        if( await bot.create_new_sticker_set(
                user_id = message.from_user.id, 
                name = data['name_videopack'] + "_by_" + myinfo.username, 
                title = data['title_videopack'] + " | by @"+myinfo.username,
                emojis= '‚ù§Ô∏è',
                webm_sticker = open("file/"+data['video']+'.webm', 'rb')
                )):
            await bot.send_message(message.chat.id, f"–°—Ç–≤–æ—Ä–µ–Ω–æ –Ω–æ–≤–∏–π –ø–∞–∫ –≤—ñ–¥–µ–æ-–Ω–∞–ª—ñ–ø–æ–∫ t.me/addstickers/{data['name_videopack']}_by_{myinfo.username}")
            await state.finish()
            #deletePhoto
            os.remove("file/"+data['video']+'.webm')
'''


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
    